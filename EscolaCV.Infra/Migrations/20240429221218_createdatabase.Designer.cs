// <auto-generated />
using System;
using EscolaCV.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EscolaCV.Infra.Migrations
{
    [DbContext(typeof(EscolaCVContext))]
    [Migration("20240429221218_createdatabase")]
    partial class createdatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EscolaCV.Core.Domain.Entities.Escola", b =>
                {
                    b.Property<int>("EscolaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EscolaId"));

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NumSalas")
                        .HasColumnType("int");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EscolaId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Escola", (string)null);
                });

            modelBuilder.Entity("EscolaCV.Core.Domain.Entities.Pais", b =>
                {
                    b.Property<string>("PaisId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PaisId");

                    b.ToTable("pais");
                });

            modelBuilder.Entity("EscolaCV.Core.Domain.Entities.Provincia", b =>
                {
                    b.Property<int>("ProvinciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinciaId"));

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaisId")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ProvinciaId");

                    b.HasIndex("PaisId");

                    b.ToTable("Provincia", (string)null);
                });

            modelBuilder.Entity("EscolaCV.Core.Domain.Entities.Escola", b =>
                {
                    b.HasOne("EscolaCV.Core.Domain.Entities.Provincia", "provincia")
                        .WithMany("escolas")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("EscolaCV.Core.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("EscolaId")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("EscolaId");

                            b1.ToTable("Escola");

                            b1.WithOwner()
                                .HasForeignKey("EscolaId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("provincia");
                });

            modelBuilder.Entity("EscolaCV.Core.Domain.Entities.Provincia", b =>
                {
                    b.HasOne("EscolaCV.Core.Domain.Entities.Pais", "pais")
                        .WithMany("provincias")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("pais");
                });

            modelBuilder.Entity("EscolaCV.Core.Domain.Entities.Pais", b =>
                {
                    b.Navigation("provincias");
                });

            modelBuilder.Entity("EscolaCV.Core.Domain.Entities.Provincia", b =>
                {
                    b.Navigation("escolas");
                });
#pragma warning restore 612, 618
        }
    }
}
